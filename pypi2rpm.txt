==Объекты и отдельные утилиты==
Поиск по pypi
загрузка egg или tar или zip из pypi
генерация spec из egg или архива

==pypy2rpm==
2 ситуации: либо у нас есть уже srpm, и тогда нам надо выполнить обновление, либо у нас нет ничего и srpm нам надо создать автоматически.

Обновление:
1)установить srpm,
2)прочитать spec, найти там название модуля (отбросив python-module, если оно есть) и версию,
3)сходить на pypi и поискать новую версию этого модуля.
4а)Если нашли - качаем архив, кладем его в нужное место,
5а)меняем в спеке версию, добавляем changelog, запускаем buildreq, собираем srpm
4б)Если не нашли, завершаем программу

Создание srpm с нуля:
1)прочитать название модуля из getopt
2)поискать этот модуль в rpm-репозитории с приставкой python-module
3a)если нашелся, то смотрим версию и переходим к главе Обновление
4б)если не нашелся, ищем модуль на pypi
5б)качаем архив, распаковываем в темп
6б)ищем подкаталог с исходниками и setup.py, затариваем и кладем в ~/RPM/SOURCES/name.tar
7б)запускаем bdist_altrpm --speconly или его допиленный аналог и кладем в ~/RPM/SPECS/pytnon-module-name.spec
8б)запустить buildreq
9б)собрать srpm

Создание gear-репозитория с нуля.
1)прочитать название модуля из getopt
2)поискать этот модуль в rpm-репозитории с приставкой python-module
3a)если нашелся, то завершаем программу
4б)если не нашелся, ищем модуль на pypi
5б)качаем архив, создаем пустой gear-repo, делаем gear-update
6б)
7б)запускаем bdist_altrpm --speconly или его допиленный аналог и кладем в pytnon-module-name.spec
8б)запустить gear-buildreq
9б)вставить changelog
10б) открыть спек на редактирование</p>
